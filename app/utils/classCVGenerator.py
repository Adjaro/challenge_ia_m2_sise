import re
import os
import tempfile
import litellm
import json
from PyPDF2 import PdfReader
from weasyprint import HTML
from fpdf import FPDF
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

class CVGenerator:
    def __init__(self):
        self.mistral_api_key = os.getenv("MISTRAL_API_KEY")
    
    def generate_perfect_cv(self, cv_text, job_description):
        """
        G√©n√®re un CV optimis√© bas√© sur le CV original et la description du poste,
        puis structure les donn√©es pour √™tre compatible avec notre g√©n√©rateur de PDF.
        """
        # Prompt pour obtenir un CV optimis√© structur√©
        prompt = f"""
    √Ä partir du texte suivant d'un CV et de la description d'une offre d'emploi, g√©n√®re un CV optimis√© pour correspondre au mieux √† l'offre.

    IMPORTANT: La r√©ponse doit √™tre structur√©e en JSON pour √™tre trait√©e par un syst√®me de g√©n√©ration de PDF. Respecte strictement le format demand√©.

    CV Original:
    {cv_text}

    Offre d'emploi:
    {job_description}

    INSTRUCTIONS:
    1. Analyse le CV original et l'offre d'emploi pour identifier les comp√©tences et exp√©riences les plus pertinentes.
    2. G√©n√®re un CV optimis√© qui met en valeur ces √©l√©ments.
    3. Retourne ta r√©ponse UNIQUEMENT au format JSON suivant, sans aucun texte avant ou apr√®s:

    ```json
    {{
    "prenom": "Pr√©nom",
    "nom": "NOM",
    "titre": "TITRE DU POSTE",
    "objectif": "Texte d√©crivant l'objectif professionnel, adapt√© √† l'offre d'emploi (maximum 4 lignes)",
    "competences": [
        "Comp√©tence 1",
        "Comp√©tence 2",
        "Comp√©tence 3",
        "Comp√©tence 4",
        "Comp√©tence 5",
        "Comp√©tence 6",
        "Comp√©tence 7"
    ],
    "interets": [
        "Int√©r√™t 1",
        "Int√©r√™t 2"
    ],
    "contacts": [
        {{"icon": "üìû", "value": "Num√©ro de t√©l√©phone"}},
        {{"icon": "‚úâÔ∏è", "value": "Adresse email"}},
        {{"icon": "üìç", "value": "Adresse postale"}}
    ],
    "experiences": [
        {{
        "date": "MM/AAAA - MM/AAAA",
        "titre": "Nom de l'entreprise",
        "lieu": "Ville",
        "details": [
            "Description d√©taill√©e de la responsabilit√© 1",
            "Description d√©taill√©e de la responsabilit√© 2",
            "Description d√©taill√©e de la responsabilit√© 3"
        ]
        }},
        {{
        "date": "MM/AAAA - MM/AAAA",
        "titre": "Nom de l'entreprise",
        "lieu": "Ville",
        "details": [
            "Description d√©taill√©e de la responsabilit√© 1",
            "Description d√©taill√©e de la responsabilit√© 2"
        ]
        }}
    ],
    "formation": [
        {{
        "titre": "Nom du dipl√¥me ou de la formation",
        "institution": "Nom de l'√©tablissement",
        "details": "D√©tails suppl√©mentaires (sp√©cialisation, mention, etc.)"
        }}
    ]
    }}
    ```

    IMPORTANT: Assure-toi que le JSON est valide et complet, avec les champs exactement comme sp√©cifi√©s ci-dessus.
    """
        
        response = litellm.completion(
            model="mistral/mistral-medium",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2000,
            temperature=0.01,
            api_key=self.mistral_api_key,
        )
        
        cv_data_json = response["choices"][0]["message"]["content"].strip()
        
        # Extraction du JSON (au cas o√π il y aurait du texte avant/apr√®s)
        json_pattern = r'```json\s*([\s\S]*?)\s*```'
        match = re.search(json_pattern, cv_data_json)
        
        if match:
            cv_data_json = match.group(1)
        else:
            # Si pas de balises code, essayer de trouver directement le JSON
            json_pattern = r'^\s*{\s*"prenom":'
            match = re.search(json_pattern, cv_data_json)
            if match:
                cv_data_json = cv_data_json
        
        try:
            # Analyse du JSON
            cv_data = json.loads(cv_data_json)
            return cv_data
        except json.JSONDecodeError as e:
            # En cas d'erreur de d√©codage JSON
            print(f"Erreur de d√©codage JSON: {e}")
            print(f"Contenu re√ßu: {cv_data_json}")
            # Retourner une structure minimale
            return {
                "prenom": "Erreur",
                "nom": "De Format",
                "titre": "ERREUR DE PARSING JSON",
                "objectif": "Une erreur s'est produite lors de l'analyse de la r√©ponse. Veuillez r√©essayer.",
                "competences": ["Erreur de formatage"],
                "interets": ["Erreur de formatage"],
                "contacts": [{"icon": "‚ö†Ô∏è", "value": "Erreur de formatage"}],
                "experiences": [{"date": "", "titre": "Erreur", "lieu": "", "details": ["Erreur de formatage"]}],
                "formation": [{"titre": "Erreur", "institution": "", "details": "Erreur de formatage"}]
            }

    def clean_text(self, text):
        """
        Nettoie le texte en supprimant les emojis et caract√®res sp√©ciaux non support√©s par fpdf.
        
        Args:
            text (str): Texte √† nettoyer
            
        Returns:
            str: Texte nettoy√©
        """
        text = re.sub(r'[\U00010000-\U0010ffff]', '', text)  # Supprime les emojis
        text = text.encode('latin-1', 'ignore').decode('latin-1')  # Supprime les caract√®res non support√©s
        return text
    
    def export_cv_to_pdf(self, cv_data, output_path=None):
        """
        G√©n√®re un PDF de CV suivant un mod√®le deux colonnes.
        
        Args:
            cv_data (dict): Dictionnaire contenant les donn√©es du CV
            output_path (str, optional): Chemin de sortie pour le PDF. Si None, cr√©e un fichier temporaire.
            
        Returns:
            str: Chemin vers le fichier PDF g√©n√©r√©
        """
        # Style CSS pour un CV professionnel avec deux colonnes
        css = """
            @page {
                size: A4;
                margin: 0;
            }
            body {
                font-family: 'Arial', 'Helvetica', sans-serif;
                margin: 0;
                padding: 0;
                color: #333;
                line-height: 1.5;
            }
            .cv-container {
                display: flex;
                width: 100%;
                height: 100%;
            }
            .left-column {
                width: 30%;
                background-color: #0e5e73;
                color: white;
                padding: 30px 20px;
            }
            .right-column {
                width: 70%;
                padding: 30px 20px;
            }
            .profile-image {
                width: 100%;
                margin-bottom: 20px;
                text-align: center;
            }
            .profile-image img {
                width: 80%;
                border: 3px solid white;
            }
            h1 {
                color: #0e5e73;
                font-size: 38px;
                margin: 0;
                font-weight: bold;
                line-height: 1.1;
            }
            h1 .lastname {
                color: black;
            }
            .job-title {
                font-size: 18px;
                color: #666;
                margin-top: 5px;
                margin-bottom: 25px;
                text-transform: uppercase;
            }
            .contact-info {
                margin-bottom: 30px;
            }
            .contact-item {
                display: flex;
                align-items: center;
                margin-bottom: 10px;
            }
            .contact-icon {
                margin-right: 10px;
                width: 20px;
            }
            .section-title {
                font-size: 18px;
                text-transform: uppercase;
                font-weight: bold;
                color: white;
                margin-top: 30px;
                margin-bottom: 15px;
                padding-bottom: 5px;
                border-bottom: 2px solid white;
            }
            .right-section-title {
                font-size: 18px;
                text-transform: uppercase;
                font-weight: bold;
                color: #0e5e73;
                margin-top: 30px;
                margin-bottom: 15px;
                padding-bottom: 5px;
                border-bottom: 2px solid #0e5e73;
            }
            .skill-item, .interest-item {
                margin-bottom: 8px;
            }
            .experience {
                margin-bottom: 20px;
            }
            .experience-header {
                margin-bottom: 10px;
            }
            .experience-date {
                color: #666;
                font-weight: bold;
            }
            .experience-title {
                font-weight: bold;
            }
            .experience-location {
                font-style: italic;
            }
            .experience-details {
                margin-left: 15px;
            }
            .experience-details ul {
                margin: 0;
                padding-left: 20px;
            }
            .experience-details li {
                margin-bottom: 5px;
            }
            .education {
                margin-bottom: 20px;
            }
            .education-title {
                font-weight: bold;
            }
            .education-institution {
                font-style: italic;
            }
            .education-details {
                margin-top: 5px;
            }
        """
        
        # Cr√©ation du HTML bas√© sur les donn√©es fournies
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>{cv_data['prenom']} {cv_data['nom']} - CV</title>
            <style>
                {css}
            </style>
        </head>
        <body>
            <div class="cv-container">
                <div class="left-column">
                    <!-- Photo de profil (optionnelle) -->
                    {f'<div class="profile-image"><img src="{cv_data["photo"]}" alt="Photo de profil"></div>' if "photo" in cv_data else ''}
                    
                    <!-- Section Objectif -->
                    <div class="section-title">OBJECTIF PROFESSIONNEL</div>
                    <div class="objective">
                        {cv_data['objectif']}
                    </div>
                    
                    <!-- Section Comp√©tences -->
                    <div class="section-title">COMP√âTENCES</div>
                    <div class="skills">
        """
        
        # Ajouter les comp√©tences
        for skill in cv_data['competences']:
            html_content += f'                <div class="skill-item">‚Ä¢ {skill}</div>\n'
        
        html_content += """
                    </div>
                    
                    <!-- Section Centres d'int√©r√™t -->
                    <div class="section-title">CENTRES D'INT√âR√äT</div>
                    <div class="interests">
        """
        
        # Ajouter les centres d'int√©r√™t
        for interest in cv_data['interets']:
            html_content += f'                <div class="interest-item">‚Ä¢ {interest}</div>\n'
        
        html_content += f"""
                    </div>
                </div>
                
                <div class="right-column">
                    <!-- Nom et titre -->
                    <h1><span class="firstname">{cv_data['prenom']}</span> <span class="lastname">{cv_data['nom']}</span></h1>
                    <div class="job-title">{cv_data['titre']}</div>
                    
                    <!-- Informations de contact -->
                    <div class="contact-info">
        """
        
        # Ajouter les informations de contact
        for contact in cv_data['contacts']:
            html_content += f"""
                        <div class="contact-item">
                            <div class="contact-icon">{contact['icon']}</div>
                            <div>{contact['value']}</div>
                        </div>
            """
        
        html_content += """
                    </div>
                    
                    <!-- Section Exp√©riences professionnelles -->
                    <div class="right-section-title">EXP√âRIENCES PROFESSIONNELLES</div>
        """
        
        # Ajouter les exp√©riences professionnelles
        for exp in cv_data['experiences']:
            html_content += f"""
                    <div class="experience">
                        <div class="experience-header">
                            <div class="experience-date">{exp['date']}</div>
                            <div class="experience-title">{exp['titre']}</div>
                            <div class="experience-location">{exp['lieu']}</div>
                        </div>
                        <div class="experience-details">
                            <ul>
            """
            
            for detail in exp['details']:
                html_content += f'                            <li>{detail}</li>\n'
            
            html_content += """
                            </ul>
                        </div>
                    </div>
            """
        
        html_content += """
                    <!-- Section Formation -->
                    <div class="right-section-title">FORMATION</div>
        """
        
        # Ajouter les formations
        for edu in cv_data['formation']:
            html_content += f"""
                    <div class="education">
                        <div class="education-title">{edu['titre']}</div>
                        <div class="education-institution">{edu['institution']}</div>
                        <div class="education-details">{edu['details']}</div>
                    </div>
            """
        
        html_content += """
                </div>
            </div>
        </body>
        </html>
        """
        
        # D√©terminer le chemin de sortie
        if output_path is None:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as pdf_file:
                output_path = pdf_file.name
        
        # G√©n√©rer le PDF
        HTML(string=html_content).write_pdf(output_path)
        return output_path